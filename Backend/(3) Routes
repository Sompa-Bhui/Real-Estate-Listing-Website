const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const config = require('../config/db');
const User = require('../models/User');
const router = express.Router();

// Register User
router.post('/register', (req, res) => {
    const { name, email, password } = req.body;

    User.findOne({ email }).then(user => {
        if (user) {
            return res.status(400).json({ email: 'Email already exists' });
        } else {
            const newUser = new User({ name, email, password });

            bcrypt.genSalt(10, (err, salt) => {
                bcrypt.hash(newUser.password, salt, (err, hash) => {
                    if (err) throw err;
                    newUser.password = hash;
                    newUser.save().then(user => res.json(user)).catch(err => console.log(err));
                });
            });
        }
    });
});

// Login User
router.post('/login', (req, res) => {
    const { email, password } = req.body;

    User.findOne({ email }).then(user => {
        if (!user) {
            return res.status(404).json({ email: 'Email not found' });
        }

        bcrypt.compare(password, user.password).then(isMatch => {
            if (isMatch) {
                const payload = { id: user.id, name: user.name };

                jwt.sign(payload, config.secretOrKey, { expiresIn: 3600 }, (err, token) => {
                    res.json({ success: true, token: 'Bearer ' + token });
                });
            } else {
                return res.status(400).json({ password: 'Password incorrect' });
            }
        });
    });
});

module.exports = router;




const express = require('express');
const Property = require('../models/Property');
const router = express.Router();

// Add new property
router.post('/add', (req, res) => {
    const { title, description, price, location } = req.body;
    const newProperty = new Property({ title, description, price, location });

    newProperty.save().then(property => res.json(property)).catch(err => console.log(err));
});

// Get all properties
router.get('/', (req, res) => {
    Property.find().then(properties => res.json(properties)).catch(err => console.log(err));
});

// Get property by ID
router.get('/:id', (req, res) => {
    Property.findById(req.params.id).then(property => res.json(property)).catch(err => console.log(err));
});

module.exports = router;





